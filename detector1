import cv2
import numpy as np

#función para el reconocimiento del color de la figura
def figColor(imagenHSV):
  color = 'No dectect'
  #Amarillo
  amarilloBajo = np.array([20, 100, 20], np.uint8)
  amarilloAlto = np.array([32, 255, 255], np.uint8)
  #Verde
  verdeBajo = np.array([36, 100, 20], np.uint8)
  verdeAlto = np.array([70, 255, 255], np.uint8)

   #Se genera una mascara con los rangos especificados para poder detectar el color

  maskVerde = cv2.inRange(imagenHSV, verdeBajo, verdeAlto)
  maskAmarillo = cv2.inRange(imagenHSV, amarilloBajo, amarilloAlto)

  #se define los contornos del color detectado
 
  cntsVerde = cv2.findContours(maskVerde, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[0]
  cntsAmarillo= cv2.findContours(maskAmarillo, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[0]


  #se retorna el color de acuerdo al contorno generado
  if len(cntsAmarillo)>0: color = 'Amarillo'
  elif len(cntsVerde)>0: color = 'Verde'

  return color


#Función para reconocer la figura geometrica  
def figName(contorno,width,height):
  #se hace una aproximacion de la cantidad de lados del contorno generado
  epsilon = 0.02*cv2.arcLength(contorno,True)
  approx = cv2.approxPolyDP(contorno,epsilon,True) 

  #de acuerdo a la cantidad de lados se retorna el tipo de figura
  if len(approx) == 3:
    namefig = 'Triangulo'
  if len(approx) == 4:
    aspect_ratio = float(width)/height
    if aspect_ratio == 1:
      namefig = 'Cuadrado'
    else:
      namefig = 'Rectangulo'
  if len(approx) == 5:
    namefig = 'Pentagono'
  if len(approx) == 6:
    namefig = 'Hexagono'
  if len(approx) > 10:
    namefig = 'Circulo'

  return namefig

#se captura la camara externa
cap = cv2.VideoCapture(0)


while True:
   #capturamos la imagen con la que vamos a trabajar
    ret, imagen = cap.read()  
    #ret es igual a true si se esta capturando una imagen
    if ret == True:
        imagen=cv2.flip(imagen,1)
        #se pasa de BGR a HSV
        gray = cv2.cvtColor(imagen, cv2.COLOR_BGR2GRAY)
        #Se aplica detección de bordes
        canny = cv2.Canny(gray, 10,150)
        #Se aplica transformaciones morfologicas para poder mejorar la imagen binaria obtenida
        canny = cv2.dilate(canny,None,iterations=1)
        canny = cv2.erode(canny,None,iterations=1)
        #se encuentran los contornos 
        cnts,_ = cv2.findContours(gray, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) 
        #se obtiene la imagen en hsv
        imageHSV = cv2.cvtColor(imagen, cv2.COLOR_BGR2HSV)
        #se recorre cada uno de los contornos encontrados
        for c in cnts:
            #se obtiene la posicion, el ancho y la altura del contorno
            x, y, w, h = cv2.boundingRect(c)
            #se crea una imagen auxiliar de negro de dos dimensiones con el mismo ancho
            #y alto de la imagen de entrada
            imAux = np.zeros(imagen.shape[:2], dtype="uint8")
            #se especifica el tamaño de la imagen auxiliar
            imAux = cv2.drawContours(imAux, [c], -1, 255, -1)
            #se combina la imagen auxiliar y la de HSV, esto es necesario para poder
            #detectar el color de cada figura geometrica
            maskHSV = cv2.bitwise_and(imageHSV,imageHSV, mask=imAux)
            #se llama a la función para detectar las figuras
            name = figName(c,w,h)
            #se llama la funcion para detectar el color
            color = figColor(maskHSV)
            #se une el tipo de figura y el color para poder mostrarlo
            nameColor = name+' ' + color
            #se muestra el texto con la forma y el color
            cv2.putText(imagen,nameColor,(x,y-5),1,1.2,(0,255,0),2)
            #se visualiza la imagen 
            cv2.imshow('imagen',canny)
    
            #se espera a que se presione una tecla para seguir el proceso
          
cap.release()
cv2.destroyAllWindows()