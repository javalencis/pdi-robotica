import cv2
import numpy as np

def figColor(frameHSV):
  
  #Verde
  verdeBajo = np.array([36, 100, 20], np.uint8)
  verdeAlto = np.array([70, 255, 255], np.uint8)
  azulBajo = np.array([100,80,20], np.uint8)
  azulAlto = np.array([125,255,255], np.uint8)


  # Se buscan los colores en la imagen, según los límites altos
  maskVerde = cv2.inRange(frameHSV, verdeBajo, verdeAlto)
  mask = cv2.inRange(frameHSV, azulBajo, azulAlto)


  cntsVerde = cv2.findContours(maskVerde, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[0] #Reemplaza por 1, si tienes OpenCV3
  cntsAzul= cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[0] #Reemplaza por 1, si tienes OpenCV3

  if len(cntsVerde)>0: color = 'Verde'
  elif len(cntsAzul)>0: color = 'Azul'

  return color

def figName(contorno,width,height):
  epsilon = 0.01*cv2.arcLength(contorno,True)
  approx = cv2.approxPolyDP(contorno,epsilon,True)
  if len(approx) == 3:
    namefig = 'Triangulo'
  if len(approx) == 4:
    aspect_ratio = float(width)/height
    if aspect_ratio == 1:
      namefig = 'Cuadrado'
    else:
      namefig = 'Rectangulo'

  if len(approx) > 10:
    namefig = 'Circulo'
  return namefig

cap = cv2.VideoCapture(1)
ret, frame = cap.read()
gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
canny = cv2.Canny(gray, 10,150)
canny = cv2.dilate(canny,None,iterations=1)
canny = cv2.erode(canny,None,iterations=1)
#_,cnts,_ = cv2.findContours(canny, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) #OpenCV 3
cnts,_ = cv2.findContours(canny, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) #OpenCV 4
imageHSV = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
for c in cnts:
  x, y, w, h = cv2.boundingRect(c)
  imAux = np.zeros(frame.shape[:2], dtype="uint8")
  imAux = cv2.drawContours(imAux, [c], -1, 255, -1)
  maskHSV = cv2.bitwise_and(imageHSV,imageHSV, mask=imAux)
  name = figName(c,w,h)
  color = figColor(maskHSV)
  nameColor = name + ' ' + color
  cv2.putText(frame,nameColor,(x,y-5),1,0.8,(0,255,0),1)
  cv2.imshow('imagen',frame)
  cv2.waitKey(0)

""" while True:
  ret, frame = cap.read()
  if ret==True:
    frameHSV = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    mask = cv2.inRange(frameHSV, verdeBajo, verdeAlto)
    contornos,_ = cv2.findContours(mask, cv2.RETR_EXTERNAL,
      cv2.CHAIN_APPROX_SIMPLE)
    for c in contornos:
      area = cv2.contourArea(c)
      if(area > 1000):
        epsilon = 0.015*cv2.arcLength(c,True)
        approx = cv2.approxPolyDP(c,epsilon,True)
        print(len(approx))
        x,y,w,h = cv2.boundingRect(approx)
        if len(approx)==4:
          cv2.rectangle(frame,(x,y),(x+w,y+h),(255,255,0),2)
          cv2.putText(frame,'Rectangulo', (x,y-5),1,1.5,(0,255,0),2)
        if len(approx)>8:
          cv2.putText(frame,'Circulo', (x,y-5),1,1.5,(0,255,0),2)
        cv2.drawContours(frame, [approx], 0, (0,255,0),2)
    
      cv2.imshow('maskAzul', mask)
      cv2.imshow('frame', frame)
    if cv2.waitKey(1) & 0xFF == ord('s'):
      break
  time.sleep(0.5)
cap.release()
cv2.destroyAllWindows() """
"""     for c in contornos:
      area = cv2.contourArea(c)
      if(area >2000):
        epsilon = 0.02*cv2.arcLength(c,True)
        approx = cv2.approxPolyDP(c,epsilon,True)
        #print(len(approx))
        x,y,w,h = cv2.boundingRect(approx)
        print(len(approx))
        if len(approx)==4:
          cv2.putText(frame,'Rectangulo', (x,y-5),1,1.5,(0,255,0),2)
        if len(approx)>5:
          cv2.putText(frame,'Circulo', (x,y-5),1,1.5,(0,255,0),2)
        cv2.drawContours(frame, [approx], 0, (0,255,0),2) """
 
     



